<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cherry&#39;Home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.weimu.com/"/>
  <updated>2020-03-06T14:32:06.711Z</updated>
  <id>https://www.weimu.com/</id>
  
  <author>
    <name>丨韦木丨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>她</title>
    <link href="https://www.weimu.com/2020/03/06/%E5%A5%B9.html"/>
    <id>https://www.weimu.com/2020/03/06/她.html</id>
    <published>2020-03-06T14:27:24.000Z</published>
    <updated>2020-03-06T14:32:06.711Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="曾经，我也有一个"><a href="#曾经，我也有一个" class="headerlink" title="曾经，我也有一个"></a>曾经，我也有一个</h5><p>​    曾经，我也有一个，在那年花开，梨花将落</p><p>​    这篇文仅仅是我在离开她之后，十分想她的时候写的，所以难免有些悲观，介意者可直接左上角，勿喷勿骂，如此安好。</p><p>​    写作的目的当然不是为了博得同情，或者关注量啥的，只是单纯地发泄一下，在以后的某一天再打开这个网页，听上一首歌，大方说一句真好。</p><p>​    那年我毕业了，踏进了大学，而你去复读一年，也是在你复读的那个寒假，表了白。</p><p>​    让我感到幸运的是，你居然答应了，对此我至今满怀感激，估计谁也不会知道一个心有自卑的男孩，表白成功对于他意味着什么。我知道，只是感到了划破黑暗的一道光，温暖绵长。</p><p>​    之后就没了，直到你高考结束，本来是来为你祝贺完成了一项艰苦的工作，于是我开开心心地来了，满怀期待，可是没有一点联络。虽然我还记得那时候他们的表情。</p><p>​    一个月了还是，我也忘了多久，我们还是开始了，像得到糖果的小孩纸，你就是我最好的礼物吖，一直都是。</p><p>​    可是我没有送你一件礼物，哪怕像样一点的，我也不知道在想什么，你的生日，情人节，七夕，都会被莫名错过，我也不知道为什么。</p><p>​    我还记得我刚学HTML时为你写的一张网页，丑的简直不堪回首。。。</p><p>​    可能在我心里最好的礼物就是我那把吉他上面你的名字吧，最重要的名字和我最重要的东西，至少那时是那把吉他。</p><p>​    于意料之外，可能也是期望之中，之后的之后，我们还是分开了。</p><p>​    虽然我还是不懂，难道我就有那么的不堪，或许是太幼稚，可是我还是不懂。</p><p>​    对不起，我没有完成我的承诺和你一直在一起，一直一直说好的</p><p>​    你说你想在海边买一所房子  … … （房子房子，想到那样可爱的你还是忍不住笑 . ^_^ .）</p><p>​    韦木，对不起，你是我很重要的人，一直都是，可是为什么一点都不在意我，哪怕一点点。</p><p>​    我真的不想说出那句话，以前我的眼里只有两种人，好人和坏人。</p><p>​    后来我的眼里还是两种人，有钱人和没钱人。</p><p>​    我最讨厌的就是别人说现实，别 tm 拿现实教训我。</p><p>​    因为直到今天我依然认为那束是暖阳，不是手电筒，你依然是最美的，</p><p>​    我这人就是喜欢道歉，可能也是性格原因，</p><p>​    对不起，我就是放不下你，我还是会等你回来，我再也不想在线式分手，</p><p>​    怪我不够强大，竖子也，为今之计，他说要自我提升，</p><p>​    今年花开，梨花将落，我好想你</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="她" scheme="https://www.weimu.com/tags/%E5%A5%B9/"/>
    
  </entry>
  
  <entry>
    <title>考研2021</title>
    <link href="https://www.weimu.com/2020/03/04/%E8%80%83%E7%A0%942021.html"/>
    <id>https://www.weimu.com/2020/03/04/考研2021.html</id>
    <published>2020-03-04T05:13:42.000Z</published>
    <updated>2020-03-04T05:15:11.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="考研计划"><a href="#考研计划" class="headerlink" title="考研计划"></a>考研计划</h2><h3 id="时间安排："><a href="#时间安排：" class="headerlink" title="时间安排："></a><strong>时间安排：</strong></h3><p>​    <strong>一般是</strong></p><p>​    <strong>当年9月末研究生预报名，</strong><a href="https://link.zhihu.com/?target=http%3A//yz.chsi.com.cn/" target="_blank" rel="noopener">中国研究生招生信息网</a></p><p>​    <strong>10月中旬正式报名并且到相应地点拍照确认，</strong></p><p>​    <strong>12月底一般都是周六周日参加统考，</strong></p><p>​    <strong>结束了准备复试，到次年二月分数公布，</strong></p><p>​    <strong>三月开始复试。</strong></p><h3 id="考研数学"><a href="#考研数学" class="headerlink" title="考研数学"></a>考研数学</h3><p><strong>copy学姐的回答：</strong><a href="https://www.zhihu.com/question/328628142/answer/1029756726" target="_blank" rel="noopener">https://www.zhihu.com/question/328628142/answer/1029756726</a></p><h4 id="推荐书-amp-网课"><a href="#推荐书-amp-网课" class="headerlink" title="推荐书&amp;网课"></a>推荐书&amp;网课</h4><h5 id="网课"><a href="#网课" class="headerlink" title="网课"></a><strong>网课</strong></h5><p>​        <strong>汤家凤高数强化班、李永乐线代强化班、方浩高数强化班的级数部分</strong></p><h5 id="全书"><a href="#全书" class="headerlink" title="全书"></a><strong>全书</strong></h5><p>​        <strong>李正元数学全书+李永乐线性代数辅导讲义+高数18讲</strong></p><p>​    <strong>习题集</strong></p><p>​        <strong>李林老师的880题和108题</strong></p><h5 id="真题"><a href="#真题" class="headerlink" title="真题"></a><strong>真题</strong></h5><p>​        <strong>张宇考研数学真题大全解（数一、数三可以都买）</strong></p><h5 id="模拟题"><a href="#模拟题" class="headerlink" title="模拟题"></a><strong>模拟题</strong></h5><p>​        <strong>合工大超越五套卷+李林六套卷+李林四套卷，如果仍有余力的话可以做一做数一和数二的</strong></p><h4 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h4><h5 id="3月—4月-基础阶段-每天约7h"><a href="#3月—4月-基础阶段-每天约7h" class="headerlink" title="3月—4月 基础阶段 每天约7h"></a><strong>3月—4月 基础阶段 每天约7h</strong></h5><p>​        3月开始1.5倍速看<strong>汤家凤的高数强化班</strong>，<strong>一边看一边拿一个专门的本子做笔记</strong>，看完一章就做对应部分的全书，刚开始肯定会有些困难，但不要灰心，这一轮的目的主要就是对考研数学有个大概的认识。</p><p>​        高数结束之后开始线代，<strong>李永乐的线代强化班 + 李永乐的线代讲义</strong>，因为这两个是配套的，所以就不用拿专门的本子记笔记了，在线代讲义上做补充就OK；同样是看一章网课就做对应的讲义。</p><p>​        线代也结束了就到概率论啦，这部分<strong>不用看网课，直接开始做全书的概率论部分</strong>。</p><p>​        这个阶段刷题<strong>切忌眼高手低！！！！！！</strong>不管这道题看起来多白痴多简单，也<strong>必须落在笔头上！！！！！看着会≠能做对</strong>，越到最后越能感觉到扎实的基础和强大的计算能力有多重要，真正考试的时候留给检查的时间不多，不可能一道道检查，只有保证会的题基本都能算对，才比较有底气啊！！全书该知乎博主自己过了差不多四遍，前两遍都是一道不落的刷下来的，从第三遍开始才只刷错题。</p><h5 id="5月—7月-强化阶段-每天5-6h"><a href="#5月—7月-强化阶段-每天5-6h" class="headerlink" title="5月—7月 强化阶段 每天5-6h"></a><strong>5月—7月 强化阶段 每天5-6h</strong></h5><p>​    <strong>全书+线代讲义+李林880题（或者任何一本你喜欢的习题集，线代部分全书和线代讲义都要看）</strong>。这一轮就是再过一遍全书＋用习题集大量刷题，并且要开始认真记知识点和公式了。在刷题时要仔细思考：<strong>“这道题考察的是什么知识点？运用了什么技巧？在其他的地方有没有看到类似的题目，可以用相似的思路?”</strong>只有这样，才算是真正的把这道弄懂吃透了。刷题的时候，如果遇见相同类型、类似技巧的题，就可以做个记号，方便之后的时候总结。</p><p>  这一轮之后，每一章的重点在哪、大概都有些什么题型、每一种题型有几种思路可以切入、自己哪些地方总是不熟练容易错……这些问题应该<strong>心中有数</strong>了。总之，<strong>刷题一定要用心、动脑</strong>。</p><h5 id="8月—9月-总结提高阶段-每天约4h"><a href="#8月—9月-总结提高阶段-每天约4h" class="headerlink" title="8月—9月 总结提高阶段 每天约4h"></a><strong>8月—9月 总结提高阶段 每天约4h</strong></h5><p>  这一阶段主要用书是<strong>高数十八讲＋李林108题+之前标记的各种资料上的错题</strong>。总之，就是要将手头上所有的全书类、习题类资料融会贯通，取百家之长，<strong>开始自己总结题型搭建框架</strong>。这是考研数学复习中  <strong>最重要的阶段</strong>！！！！！</p><p>  每一章都是<strong>全书知识点——各种资料上的错题——（高数十八讲）——李林108题——总结</strong>的顺序。我把高数十八讲打上括号是因为，这本书大佬并没全部做完，只是针对自己的薄弱环节，过了极限、不定积分、定积分和级数的部分</p><p>​    <strong>每章的总结包括以下几个部分：</strong></p><p>​        <strong>自己打死也记不住的、易混的概念、知识点和公式</strong></p><p>​        <strong>题型，每种题型都有哪几种思路，以及每一种思路的典型题（不用把题目都抄下来，只要写清是哪本资料上第几页的哪道题，保证自己能找到就好）</strong></p><p>​    <strong>注意事项（自己刷题时总爱踩的坑、总结出的计算小技巧小心得，等等）</strong></p><p>​      总结建议用<strong>A4纸或者活页本</strong>，方便以后补充。</p><p>​      这份总结完成之后，我把它称为“武林秘籍”(hhhhhh)，因为这儿<strong>有所有的薄弱环节和思考（绝对不是单纯的抄知识点抄书！！）</strong>，对我来说这<strong>就是所有资料的浓缩版</strong>。在考研数学的前一晚，数学我就只看了这份“秘籍”，所以一定要好好总结！！！</p><p>​        另外建议在这个阶段，<strong>高数、线代和概率论能够穿插进行。</strong>我自己是按照高数第一章——线代第一章——高数第二章——概率第一章——高数第三章——线代第二章——……的顺序来的。<strong>轮番宠幸有利于保持各部分的手感</strong>，如果一个科目一个科目的总结，线代和概率论被打入冷宫太久，你可能就不认得了啊！！！！</p><h5 id="10月—11月中旬-真题阶段-每天约3h"><a href="#10月—11月中旬-真题阶段-每天约3h" class="headerlink" title="10月—11月中旬 真题阶段 每天约3h"></a><strong>10月—11月中旬 真题阶段 每天约3h</strong></h5><p>​    上一轮总结完，应该有一个比较完整的框架了，这个时候开始上真题。真题我只刷了2000年之后的，<strong>刷的时候最好用正式的答题卡</strong>（tb上有卖），并且<strong>一定一定要计时，争取2h~2.5h做完一套</strong>（如果做得比较快，可以把数一数二中跟数三不同的题目挑出来做一下）<strong>。</strong>每做完一套就立刻批改，看自己错在了哪个知识点并立刻弄懂，不断补充自己的那份“武林秘籍”。如果之前基础打得比较扎实，题目也都认真刷了，那么做起真题来应该比较轻松，得心应手~<strong>真题做完一遍之后，再次拿出自己总结好的“秘籍”复习一遍</strong>，准备迎接各种模拟题的轰炸。</p><h5 id="11月中旬—考前-考前巩固期-每天2-3h"><a href="#11月中旬—考前-考前巩固期-每天2-3h" class="headerlink" title="11月中旬—考前 考前巩固期 每天2-3h"></a><strong>11月中旬—考前 考前巩固期 每天2-3h</strong></h5><p>​     11月中旬开始各个名师的模拟卷应该就开始满天飞了。<strong>模拟卷不用买太多</strong>，差不多两天做一套，十几二十套就足够刷到考前了。李林老师在临考前会在微博上画重点题，跟着做做最好。这段时间就是<strong>过错题、复习总结好的“秘籍”、刷模拟题，保持一个比较好的手感。</strong></p><h4 id="一些Tips"><a href="#一些Tips" class="headerlink" title="一些Tips"></a>一些Tips</h4><p>​    1、每次刷题的时候都要<strong>独立完成，不要一边看答案一边算！！！</strong>不管是全书、习题集还是真题模拟卷，<strong>自己不会、卡壳的题一定要拿不同的记号标记好</strong>，比如我自己，第一遍做错的题用红色横线，第二次的错题用蓝色三角，第三次的错题用绿色记号笔……这样每轮刷题都可以看到自己的进步，给自己一个比较积极的反馈；而且到复习的最后阶段，那些错过三四次的题肯定是要重点关注的，可以更有针对性。</p><p>​    2、数学公式多而杂。等价无穷小替换、乱七八糟的积分公式、泰勒展开式balabala真的太多啦！！我的做法是把所有我记不太清楚的公式都总结到一张A4纸上，贴在我宿舍的墙上，<strong>每天起床之后、临睡之前都写一写</strong>，这样日积月累就能记得很牢固啦</p><p>​    3、不到最后就<strong>不要灰心不要放弃！！</strong>刚开始刷题这道不会，那道也不会真的太正常了，一战时到了八九月份我仍然对级数非常绝望，判敛不会，求和函数也不会。那段时间我把图书馆里大多数考研数学资料的级数部分都看了一遍，但还是没什么效果……后来就还是一遍一遍刷全书，也不知道是哪一天就突然开窍了！！<strong>只要持续不断地刷题，总有一天这些题目会从陌生人变成熟悉的老朋友！</strong></p><p>​    4、数学刷题<strong>在精不在多，不要做了很多却囫囵吞枣</strong>。我觉得我上面推荐的那些资料已经完全够用了，重点在于善于思考总结。如果能把每道题目都认真吃透，我觉得完全可以考到130甚至140+的水平。我这两次都是在计算上吃了亏……所以要再次强调动笔算动笔算！计算能力特别特别特别特别重要！！</p><p>​    5、从刷题的一开始就养成良好的习惯，<strong>在草稿纸上也要标好题号，尽量有条理、工整些书写</strong>，不要跳步跳得太厉害，不要东一块西一块，也不要写得太乱连自己都看不清。这样做的好处是，如果你这道题做错了，就可以马上找到草稿纸上相应的步骤，知道自己错在哪里。真正考试的时候，也能大大提高检查的速度和效率。</p><p>​    6、视频课在哪看？当然最好是b站啊！！最近b站管得比较严，大家也可以关注一些提供考研资源的公众号，存到百度云里！！</p><h3 id="考研英语"><a href="#考研英语" class="headerlink" title="考研英语"></a>考研英语</h3><p>​    <strong>copy学姐的回答：</strong><a href="https://www.zhihu.com/question/360438668/answer/1027766605" target="_blank" rel="noopener">https://www.zhihu.com/question/360438668/answer/1027766605</a></p><h4 id="用书-amp-app"><a href="#用书-amp-app" class="headerlink" title="用书&amp;app"></a>用书&amp;app</h4><p>​        <strong>红宝书</strong>、<strong>黄皮书</strong>、<strong>考研英语高分写作（王江涛）</strong>、<strong>考研英语长难句解密（何凯文）</strong>、<strong>墨墨背单词（app）</strong></p><h4 id="时间安排-1"><a href="#时间安排-1" class="headerlink" title="时间安排"></a>时间安排</h4><h5 id="3-6月-背单词"><a href="#3-6月-背单词" class="headerlink" title="3-6月 背单词"></a><strong>3-6月 背单词</strong></h5><pre><code>这段时间最主要的任务就是一遍一遍地背单词。随便用哪本单词书都可以，重要的是**要根据艾宾浩斯遗忘曲线背**（即每个单词要背5遍，分别是在第1、2、4、7、15天）。可以提前拿个表格把每天要新学、复习的list规划好。</code></pre><p>​          背单词的过程很枯燥，而且根据艾宾浩斯遗忘曲线背单词，中期的任务会特别重！最夸张的时候我一天要过9个list的单词，得花两个多小时的时间，但是挺过来之后！真的背得挺牢的！</p><h5 id="7-8月-第一遍真题"><a href="#7-8月-第一遍真题" class="headerlink" title="7-8月 第一遍真题"></a><strong>7-8月 第一遍真题</strong></h5><p>​            进入7月就可以开始做第一遍真题了，大概<strong>3到4天一套</strong>的速度。</p><pre><code>第一天做完型+前两篇阅读；第二天做后两篇阅读+新题型+翻译；前两天都是做完之后就立刻对答案，标记出文章中的生词、比较好的短语和长难句，把文章中的每句话都弄懂；第三天和第四天主要用来总结：首先，把自己的每一道错题都弄懂，思考命题人在这道题挖了哪些坑，这个思考、总结的过程一定要有！！然后，把这套真题中的生词、短语等都誊抄在一张白纸上，作为积累。</code></pre><h5 id="9-10月-第二遍真题"><a href="#9-10月-第二遍真题" class="headerlink" title="9-10月 第二遍真题"></a><strong>9-10月 第二遍真题</strong></h5><p>​          第二遍真题我也是<strong>大概3天一套</strong>。</p><p>​          第一天，完整地做完完型、阅读和新题型（就是所有客观题）并且批改，在做的过程中要<strong>开始训练速度控制时间</strong>了，我给自己的目标就是所有客观题要在1h40min之内完成，这样才能给后面的主观题留出足够的时间。</p><p>​          第二和第三天<strong>逐句翻译</strong>全套试题（完型阅读新题型和翻译），翻译的时候我<strong>推荐口译</strong>，不建议笔译，那样太浪费时间啦。翻译的时候会遇到很多你能看懂，但不知道怎么用合适的中文表达的句子，遇到这种句子就标注出来然后看答案是怎么翻译的，并且学习答案的翻译技巧。这个过程不但复习了单词和长难句，而且也能提高自己的翻译能力！</p><p>​        <strong>第二遍真题结束-11月中旬 继续刷真题＋练字</strong></p><p>  这段时间我主要加入了练字的内容，因为我之前写英文真的太丑了……我大概每天花半个小时左右的时间练字帖，主要是为了阅卷老师看起来心情舒畅一点……万一能多给点分呢</p><h5 id="11月中旬—考前-真题＋总结作文模板"><a href="#11月中旬—考前-真题＋总结作文模板" class="headerlink" title="11月中旬—考前 真题＋总结作文模板"></a><strong>11月中旬—考前 真题＋总结作文模板</strong></h5><p>​              到了11月中下旬要开始弄作文啦！！</p><p>​              <strong>小作文:</strong></p><p>​                  小作文的几种文体在王江涛的那本作文书上有很详细的说明。主要就是自己总结一下各种文体的<strong>格式</strong>，然后对于道歉信、辞职信、推荐信、建议信balabala的<strong>开头结尾各总结那么一两句套话</strong>就可以啦！小作文我觉得大家拉不开太大差距。</p><p>​              <strong>大作文：</strong></p><pre><code>大作文我主要是采用**框架+填充**的方式，我没有依赖某一本作文书，而是先自己搭一个作文的框架，然后把作文书、真题等等各种英文的材料都当作语料库。具体来讲，我的大作文框架是：</code></pre><ul><li><p><em>（第一段）描述漫画 + 总结</em></p></li><li><p><em>(第二段) XX 很重要 ＋它为什么很重要，分1、2、3点，还可以正反论证</em></p></li><li><p><em>(第三段) 再强调一遍XX很重要 + 建议/呼吁</em></p><p>​          有了框架之后，就开始去有针对性地搜集语料，重点关注描述漫画、表达XX很好很重要、论述原因和建议/呼吁的短语或者句子，并且统一整理好。</p><p>​         “它为什么很好很重要”这部分可能比较难积累，我是把它分为<strong>“对个人有什么好处”和“对社会有什么好处”两大部分</strong>，再分类进行总结。</p><p><strong>比如：</strong></p></li></ul><p><em>（第一段）描述漫画：</em></p><p><em>Depicted in the pictures above are……</em></p><p><em>It is vividly depicted in the cartoon that……</em></p><p><em>（第一段）总结：</em></p><p><em>And below the drawing, there is a caption says……</em></p><p><em>Obviously/Undoubtedly, it is XX that……</em></p><p><em>(第二段) XX 很重要：</em></p><p><em>Obviously/Undoubtedly/Actually +</em></p><p> <em>XX is of great importance</em></p><p>  <em>XX plays an important/a critical role in……</em></p><p><em>(第二段) 对社会有什么好处:</em></p><p><em>Countries/societies with XX tend to be more violent/harmonious.</em></p><p><em>XX provides the seeds of harmonious and progress.</em></p><p><em>(第二段) 对个人有什么好处:</em></p><p><em>Get/gain respects from others</em></p><p><em>Keep fit</em></p><p><em>Help us secure jobs in a shifting economy/climb the career ladder</em></p><p><em>Keep a positive mental state</em></p><p><em>Reach/realize your full potential/lead fulfilling lives</em></p><p><em>(第三段) 再强调一遍XX很重要: 同第二段</em></p><p><em>(第三段)建议/呼吁:</em></p><p><em>It is high time that……/it is imperative for us to……</em></p><p><em>Necessary laws and regulations should be adopted and enforced to……</em></p><p>  当然<strong>不止这些</strong>，我足足整理了两页A4纸的语料。</p><p>  总结完模板之后，我把<strong>近十五年的所有大作文都用自己模板写了一遍</strong>，确定近几年的真题都可以用它搞定。总之，<strong>作文一定要自己写！！</strong>只总结模板是不够的。</p><h4 id="最后一些Tips"><a href="#最后一些Tips" class="headerlink" title="最后一些Tips"></a>最后一些Tips</h4><ol><li>因为真题要做好多遍，所以前几遍不要直接在书上做，可以在白纸上做。</li><li><strong>背单词要贯穿全程</strong>。3-6月是抱着红宝书啃，7月开始做真题之后，可以用墨墨背单词之类的app，零碎时间背一背。</li><li>不要一下把真题都做完，<strong>留两套</strong>到了12月份的时候模拟。</li><li>就算到了11月末开始弄作文的时候，<strong>每天也要或多或少做几篇阅读</strong>，保持语感和手感。</li><li>在总结作文模板时，不要只局限于作文书。<strong>真题也是很好的语料库！！</strong>真题的阅读都是从外刊上节选的，有很多新颖地道的表达可以用在自己的作文中。还有一些英语阅读的公众号，每天也可以看看有没有可以积累的表达。总之所有英文读物都可以成为你的语料库。</li><li>说了这么多我仍然觉得<strong>单词和长难句是最最最最重要的！！把文章读懂就是最高级的技巧。</strong></li></ol><h3 id="考研政治"><a href="#考研政治" class="headerlink" title="考研政治"></a>考研政治</h3><p>​     <strong>copy学姐的回答：</strong><a href="https://www.zhihu.com/question/358929360/answer/962704343" target="_blank" rel="noopener">https://www.zhihu.com/question/358929360/answer/962704343</a></p><h4 id="用书"><a href="#用书" class="headerlink" title="用书"></a>用书</h4><p>​        <strong>肖秀荣精讲精练</strong>、<strong>肖秀荣1000题</strong>、<strong>肖秀荣知识点提要</strong>、<strong>肖秀荣形势与政策</strong>、<strong>肖八肖四</strong>（还有一堆名师模拟卷，只做选择题）、<strong>徐涛考前预测必背20题（小黄书）</strong></p><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a><strong>视频</strong></h4><p>​        徐涛强化班（思修部分不用看；毛中特和史纲时间允许的话建议看看，听涛涛讲故事印象会比较深刻；马原那肯定得看啊不然完全看不进去精讲精练啊！！！）</p><p>​        肖秀荣考前点题课（可以不用看视频，直接看讲义就可以，一定要看！！）</p><h4 id="时间安排-2"><a href="#时间安排-2" class="headerlink" title="时间安排"></a><strong>时间安排</strong></h4><h5 id="8月初——9月中旬：精讲精练-徐涛强化视频"><a href="#8月初——9月中旬：精讲精练-徐涛强化视频" class="headerlink" title="8月初——9月中旬：精讲精练+徐涛强化视频"></a><strong>8月初——9月中旬：精讲精练+徐涛强化视频</strong></h5><p>​        看精讲精练，搭配徐涛的强化班视频（可倍速播放）。一边看视频一边在<strong>精讲精练上对应着勾划重点</strong>。如果有的知识点精讲精练上没有就在相应的位置上<strong>做笔记进行补充</strong>。进度大概是每天一章左右，特别长的章节可以分两天完成，比较短的章节也可以一天两章，自己灵活掌握。</p><p>​        精讲精练上每章结束后也有题目，每看完一章就把这章的习题做完并且<strong>弄懂</strong>，加深理解。</p><p>​        这一轮可能有点痛苦，但有涛涛的视频陪伴也就好多啦hhhhh。打基础的过程不要太着急，一定要把基础打牢，尤其是马原部分要理解好。</p><h5 id="9月中旬——10月中旬：精讲精练-1000题"><a href="#9月中旬——10月中旬：精讲精练-1000题" class="headerlink" title="9月中旬——10月中旬：精讲精练+1000题"></a><strong>9月中旬——10月中旬：精讲精练+1000题</strong></h5><p>​        每天先过一遍精讲精练，然后做对应章节的1000题。错的题目做好标记，对应的知识点在精讲精练上弄懂、标注好。也是平均每天一章左右。</p><h5 id="10月中旬——12月收到肖四之前：狂刷题-总结错题-时政"><a href="#10月中旬——12月收到肖四之前：狂刷题-总结错题-时政" class="headerlink" title="10月中旬——12月收到肖四之前：狂刷题+总结错题+时政"></a><strong>10月中旬——12月收到肖四之前：狂刷题+总结错题+时政</strong></h5><p>​        先是反复刷1000题，能刷几遍刷几遍（我在这个阶段刷了3遍1000题）。到了11月中旬，各个名师模拟卷都出来了，可以根据自己的时间买来几本刷一刷，目的是把握今年的选择题高频考点。时政的话……看看肖秀荣的那本形势与政策就行啦！这个阶段，要把自己反复错的题总结到笔记本或者A4纸上。</p><h5 id="收到肖四——考前：背肖四！！！！"><a href="#收到肖四——考前：背肖四！！！！" class="headerlink" title="收到肖四——考前：背肖四！！！！"></a><strong>收到肖四——考前：背肖四！！！！</strong></h5><p>​    每天政治复习的大部分时间就是背肖四背肖四背肖四！！也要留一点时间过一过错题和高频的选择题知识点。</p><h4 id="一些碎碎念和小建议"><a href="#一些碎碎念和小建议" class="headerlink" title="一些碎碎念和小建议"></a><strong>一些碎碎念和小建议</strong></h4><p>​        1、把握好时间！！如果你跟我一样也考数学，那么12月之前每天给政治的时间<strong>最好不要超过2.5小时</strong>。进入12月后政治又要复习选择又要背诵主观题，会占用很多时间，这个阶段想要数学、专业课有什么提高基本不可能了。所以在此之前重心还要放在数学和专业课上，12月只是保持状态和手感。</p><p>​        2、看<strong>视频的时候要用倍速</strong>，1.5倍速或者2倍速都可以。我是弄了个破解版的百度云，可以在线倍速播放（tb、闲鱼都有卖，两三块钱就搞定了）。</p><p>​        3、虽然很多书上都会有时间轴，但我还是<strong>建议要自己整理</strong>一下。整理的时候，要<strong>把史纲和毛中特结合起来</strong>，理解会议啊文章啊土地政策啊与历史事件的联系。正是因为有这样的历史事件、历史背景，所以党才会写这样的文章、开对应的会议，制定政策来达到某种目的，解决特定的问题。只有经过自己的整理、思考，印象才会深刻。我在这样整理完时间轴之后，史纲和毛中特部分的选择题真的很少错。</p><p>​        4、1000题要刷很多遍，所以<strong>不要一开始就直接把答案写在书上</strong>。前两遍可以在草稿纸上做，标好题号就行了。每次<strong>错的题都要用不同的记号在1000题上标记好</strong>，比如我自己，第一遍做错的题用红色横线，第二次的错题用蓝色三角，第三次的错题用绿色记号笔，第四次用五角星……这样到冲刺阶段过错题的时候会更有针对性。</p><p>​        5、错题怎么总结？总结错题千万<strong>不要把题干选项正确答案解析都抄上</strong>，太浪费时间啦。只需要把命题人<strong>挖的坑</strong>、反反复复都记不住或者易混的<strong>知识点</strong>、做题中总结出的<strong>规律心得</strong>写上去。比如我自己总结的一些：</p><p><em>“意识必须是对**</em>客观实在<em>**的反映，所以不能是“对鬼神的反映”（鬼神不是客观实在）</em></p><p><em>人类与我——一般与个别、共性与个性、普遍与特殊、抽象与具体；我与我的手——整体与部分</em></p><p><em>党的根本性建设是政治建设，基础性建设是思想建设，别记混！！！</em></p><p><em>见到“普适性”“普世性”就是错的，不能选！</em></p><p><em>出发点、落脚点、归宿一般选跟人有关的，比如改善民生blabla”</em></p><p>总结错题要贯穿刷题的全过程，为了方便携带，我是把错题总结在A4纸上。因为这几张A4纸上有我所有跳过的坑、易混爱忘的知识点，所以考试前一天我也只看了这几张A4纸和我自己总结的时间轴，就信心满满上考场啦。</p><p>​        6、11月刷各个名师模拟卷的选择题部分时，<strong>不要太在意对错</strong>（有些老师的题目质量真的一般），<strong>重点在于把握高频考点</strong>。如果很多老师在押题卷中都押了某个知识点，那么就说明这个知识点很重要，今年很有可能考，要重点关注！！！今年二战时我发现了一个公众号会把市面上绝大多数模拟卷涉及到的知识点汇总起来，做成pdf。所以今年我就没再做各种押题卷啦，直接买了他们总结好的pdf~也还挺好的！</p><p>​        7、肖四（或者说主观题）怎么背？我自己是<strong>肖四为主，徐涛的小黄书为辅</strong>。具体来说，对于肖四上的每一道主观题，我都会在小黄书上找出相对应的题目，然后把<strong>肖四和小黄书的答案用自己的逻辑结合起来，形成自己的答案</strong>。这样做的好处是，首先，结合之后的答案经过了自己的思考，且更符合自己的逻辑，更容易背诵；其次，能使自己的答案更全面（反正多写又不扣分是吧233333）当然，并不是肖四上的每道题都能与小黄书对应的，事实上能完全对应上的没有几道。</p><p> 如果仍有余力，可以把<strong>小黄书上最可能考的分析题考点背一背</strong>。以2020年为例，各个名师的押题表明，马原部分的对立统一规律、毛中特部分的中国之制与中国之治、史纲部分的新中国成立70周年和五四运动100周年是最可能考的分析题考点，那么我就把小黄书上上述几个专题的所有命题角度都简单过了一遍。今年考研真题就考了“中国之治与中国之制的关系”，这个角度在肖四上并没有完全对应的答案，在小黄书上却有一模一样的原题。</p><p>——————一条关于肖四的更新</p><p>  <strong>最近好多私信包括评论都提到了肖四今年翻车的事，我想说说我的看法</strong></p><p>  我经历过两次考研，主观都是肖四为主＋小黄书为辅。去年肖老神奇地押中了几乎所有题目，今年相比之下就没那么出色，原题押中的不多。但我今年的主观应该也有33-35，比去年还高。</p><p>  在我看来肖四的主要作用就是素材库＋语料库，好好背它能让你把答题纸写满，至少有话可写。今年看到题目，有很多题虽然不是原题，但考察的知识点还是跟肖四相似的或者至少搭边的，要灵活啊！别穿了个马甲就不认识了！</p><p>  多数人对考研政治的要求也就六七十分；而且考研时间这么紧，花太多时间搞主观题根本不现实。在这种情况下，<strong>我认为肖四仍然是性价比最高的选择。</strong></p><p>​        8、即使是12月疯狂背肖四主观题的阶段，也不要<strong>扔了选择题</strong>！事实上主观题大家都30分左右，大差不差，客观题才是主要拉开差距的地方。如果想过70，那么选择题能过40才比较保险。</p><h3 id="专业课9月再说。。"><a href="#专业课9月再说。。" class="headerlink" title="专业课9月再说。。"></a>专业课9月再说。。</h3><p>​        报考指南上次是2019/10/17出来的</p><h3 id="copy的感受"><a href="#copy的感受" class="headerlink" title="copy的感受"></a>copy的感受</h3><p>​        非常惭愧，本来还打算精简一些的，结果发现满满都是干货，搞得我很尴尬，全tm复制粘贴，就当给自己一个新的链接好查阅吧，等自己考完研，再进行<strong>增删改查</strong>。。</p><h3 id="一些习惯"><a href="#一些习惯" class="headerlink" title="一些习惯"></a>一些习惯</h3><p>​    早上得早点起床。我还是挺喜欢早自习的。英语我还是喜欢通过阅读来增强自己的语感。一周还是得找个时间（譬如隔三差五）来进行健身。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>​    别问我考研的目的，这不是废话吗，当然是成功上岸啦。。然后飞黄腾达啦 hahahaha~~~~</p><p>​    其次，就是培养自己的自律性了，改掉自己的一些坏毛病，让自己懂得合理计划的重要性。</p><p>​    最后，这是一条漫长且艰苦的道路，望自己能坚持下去，成功上岸，加油加油加油！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="考研" scheme="https://www.weimu.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://www.weimu.com/2020/03/01/MySQL.html"/>
    <id>https://www.weimu.com/2020/03/01/MySQL.html</id>
    <published>2020-03-01T01:27:43.000Z</published>
    <updated>2020-03-01T04:58:41.262Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>​    假如我用户名为root，密码为123456</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p 123456 -h 127.0.0.1</span><br></pre></td></tr></table></figure><p>​    -h 参数为要连接的主机</p><h4 id="库级操作"><a href="#库级操作" class="headerlink" title="库级操作"></a>库级操作</h4><p>​    显示数据库: <code>show databases;</code></p><p>​    选择数据库: <code>use dbname;</code></p><p>​    创建数据库: <code>create database dbname charset utf8;</code></p><p>​    删除数据库: <code>drop database dbname;</code></p><h4 id="表级操作"><a href="#表级操作" class="headerlink" title="表级操作"></a>表级操作</h4><p>​    首先得用<code>use dbname</code>进入一个数据库；</p><p>​    显示库下面的表：<code>show tables;</code></p><p>​    查看表的结构：<code>desc tableName;</code></p><p>​    查看表的创建过程：<code>show create table tableName</code></p><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table tbName (</span><br><span class="line">列名称1　列类型　[列参数]　[not null default ],</span><br><span class="line">列名称N　列类型　[列参数]　[not null default ]</span><br><span class="line">) engine myisam/innodb charset utf8/gbk</span><br></pre></td></tr></table></figure><p>​    </p><h5 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#增添列</span><br><span class="line">alter table tableName add 列名　列类型　[列参数]　[not null default ];</span><br><span class="line">#修改列</span><br><span class="line">alter table tableName change 旧列名  新列名  列类型　[列参数]　[not null default ];</span><br><span class="line">#删除列</span><br><span class="line">alter table tableName drop 列名;</span><br><span class="line"></span><br><span class="line">#增加主键</span><br><span class="line">alter table tableName add primary key(主键所在列名);</span><br><span class="line">#删除主键</span><br><span class="line">alter table tableName　drop primary key;</span><br><span class="line">#增加索引</span><br><span class="line">alter table tableName add [unique|fulltext] index 索引名(列名);</span><br><span class="line">#删除索引</span><br><span class="line">alter table tableName drop index 索引名;</span><br><span class="line"></span><br><span class="line">#清空表的数据</span><br><span class="line">truncate tableName;</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>​    这里只列出常用的：<code>int</code>，<code>float</code> ，<code>double</code>，<code>char</code>（定长字符），<code>varchar</code>（变长字符），<code>timestamp</code></p><h4 id="数据级操作"><a href="#数据级操作" class="headerlink" title="数据级操作"></a>数据级操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#增</span><br><span class="line">insert into 表名(col1,col2,……) values(val1,val2……);</span><br><span class="line">#若默认按序插入全部列可简写如下</span><br><span class="line">insert into 表名 values(val1,val2……);</span><br><span class="line">#一次性插入多条数据</span><br><span class="line">insert into 表名 values(val1,val2……),(val1,val2……),(val1,val2……);</span><br><span class="line">#改</span><br><span class="line">update tableName set colName=newVal where 条件;</span><br><span class="line">#删</span><br><span class="line">delete from tableName where 条件;</span><br></pre></td></tr></table></figure><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><p>​        查询全部列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tableName;</span><br></pre></td></tr></table></figure><p>​        查询指定列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select col1,col2...coln from tableName;</span><br></pre></td></tr></table></figure><p>​        常用关键字</p><p>​        <code>DISTINCT</code>：返回惟一的值（去重）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DISTINCT colName from tableName where 条件;</span><br></pre></td></tr></table></figure><p>​        <code>LIMIT</code>：限制返回的结果条数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#对查询结果返回前n条数据</span><br><span class="line">select * from tableName LIMIT n;</span><br><span class="line">#对查询结果从第n行开始，取n条数据作为返回结果</span><br><span class="line">select * from tableName LIMIT n,n;</span><br></pre></td></tr></table></figure><p>​        <code>ORDER BY colName DESC/ASC</code>：对返回结果按指定的列名进行排序（降序/升序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tableName ORDER BY colName DESC;</span><br></pre></td></tr></table></figure><p>​        查找最大或最小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tableName ORDER BY colName DESC/ASC LIMIT 1</span><br></pre></td></tr></table></figure><h5 id="分组查询-group-by"><a href="#分组查询-group-by" class="headerlink" title="分组查询 group by"></a>分组查询 <code>group by</code></h5><p>​        What？将查询结果按照1个或多个字段进行分组，字段值相同的为一组，即按照某一列进行分类。</p><p>​        现有一张学生表如下：</p><p>​        <img src="https://pic.downk.cc/item/5e5a482c6127cc07134fc10d.png" alt></p><p>​        <strong>group_concat()</strong>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将age,name分组,查询每个学生的姓名并成一组的形式返回</span><br><span class="line">select age,group_concat(name) from students group by age;</span><br></pre></td></tr></table></figure><p>​        查询结果为：</p><p>​        <img src="https://pic.downk.cc/item/5e5a45ee6127cc07134f7755.png" alt></p><p>​        <strong>GROUP BY + 聚合函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#按年龄字段查询学生人数</span><br><span class="line">select age,count(*) from students group by age;</span><br></pre></td></tr></table></figure><p>​        查询结果为：</p><p>​        <img src="https://pic.downk.cc/item/5e5a478e6127cc07134fb011.png" alt></p><p>​        </p><p>​        <strong>group by + having</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#用来分组查询后制定一些条件来输出查询结果</span><br><span class="line">#having的作用和where一样，但having只能用于group by</span><br><span class="line">#查询符合年龄要求的学生（此处只是为了演示。。）</span><br><span class="line">select age,group_concat(name) from students group by(age) having age&gt;20;</span><br></pre></td></tr></table></figure><p>​        查询结果为：        <img src="https://pic.downk.cc/item/5e5a499c6127cc07134ffa34.png" alt></p><p>​        在这里做一下 <strong>总结</strong> ：    <img src="https://pic.downk.cc/item/5e5a4be66127cc07135051a7.png" alt></p><p>​        连接查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#左连接;右连接类似(right join);内连接(inner join)，取的是左右连接的交集</span><br><span class="line">table A left join table B on tableA.col1 = tableB.col2;</span><br></pre></td></tr></table></figure><p>​        子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from tableA where colA = (select colB from tableB where ...);</span><br><span class="line">select * from (select * from ...) as tableName where ....</span><br></pre></td></tr></table></figure><h4 id="事务（Transaction）"><a href="#事务（Transaction）" class="headerlink" title="事务（Transaction）"></a>事务（Transaction）</h4><p>​    定义：一个最小的不可再分的工作单元；</p><h5 id="四大特性-ACID-："><a href="#四大特性-ACID-：" class="headerlink" title="四大特性(ACID)："></a>四大特性(<strong>ACID</strong>)：</h5><p>​        1、原子性(Actomicity)：事务是最小单位，不可再分</p><p>​        2、一致性(Consistency)：事务要求所有的DML语句操作的时候，必须保证同时成功或者同时失败</p><p>​        3、隔离性(Isolation)：事务A和事务B之间具有隔离性</p><p>​        4、持久性(Durability)：是事务的保证，事务终结的标志(内存的数据持久到硬盘文件中)</p><p>​    </p><p>​    事务成功执行，则提交；若失败，则回滚；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#开启事务</span><br><span class="line">start transaction</span><br><span class="line">#执行SQL语句</span><br><span class="line">insert、update、delete ...</span><br><span class="line">#提交事务，若失败内部会执行&apos;rollback;&apos;进行回滚，则不会修改底层数据。</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h5 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1、读未提交：read uncommitted</span><br><span class="line">- 事物A和事物B，事物A未提交的数据，事物B可以读取到</span><br><span class="line">- 这里读取到的数据叫做“脏数据”</span><br><span class="line">- 这种隔离级别最低，这种级别一般是在理论上存在，数据库隔离级别一般都高于该级别</span><br><span class="line"></span><br><span class="line">2、读已提交：read committed</span><br><span class="line">- 对方事物提交之后的数据，我当前事物才能读取到</span><br><span class="line">- 这种隔离级别高于读未提交</span><br><span class="line">- 这种级别可以避免“脏数据”，但会导致“不可重复读取”</span><br><span class="line">- Oracle默认隔离级别</span><br><span class="line"></span><br><span class="line">3、可重复读：repeatable read</span><br><span class="line">- 对方提交之后的数据，我还是读取不到</span><br><span class="line">- 这种隔离级别高于读已提交</span><br><span class="line">- 这种隔离级别可以避免“不可重复读取”，达到可重复读取，但是会导致“幻读”</span><br><span class="line">- MySQL默认级别</span><br><span class="line"></span><br><span class="line">4、串行化：serializable</span><br><span class="line">- 事务A和事务B，事务A在操作数据库时，事务B只能排队等待</span><br><span class="line">- 这种隔离级别很少使用，吞吐量太低，用户体验差</span><br><span class="line">- 这种级别可以避免“幻读”，每一次读取的都是数据库中真实存在数据，事务A与事务B串行，而不并发</span><br></pre></td></tr></table></figure><p>​    隔离级别与一致性的关系如下表：</p><p><img src="https://pic.downk.cc/item/5e5a55c76127cc071351ab3d.png" alt></p><p>​    设置隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#方式1、在my.ini文件中使用transaction-isolation选项来设置服务器的缺省事务隔离级别</span><br><span class="line">transaction-isolation = READ-COMMITTED</span><br><span class="line">#方式2、通过命令在运行的服务器中动态设置隔离级别</span><br><span class="line">SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br></pre></td></tr></table></figure><p>​    设置隔离级别的作用范围：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#会话级：只对当前的会话有效 </span><br><span class="line">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line">#或</span><br><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"></span><br><span class="line">#全局级：对所有的会话有效 </span><br><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br></pre></td></tr></table></figure><p>​    查看隔离级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@tx_isolation</span><br></pre></td></tr></table></figure><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a><strong>触发器</strong></h4><p>​    即在修改表（增、删、改）时触发相应的SQL语句。<strong>注：</strong> 不能用在临时表和视图上，尽量少使用触发器，不建议使用，因为它十分消耗资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#创建触发器</span><br><span class="line">create trigger triggerName</span><br><span class="line">after/before insert/delete/update </span><br><span class="line">on tableName</span><br><span class="line">for each row</span><br><span class="line">sql;   #触发SQL语句</span><br><span class="line"></span><br><span class="line">#删除触发器</span><br><span class="line">drop trigger triggerName;</span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a><strong>索引</strong></h4><p>​        提高查询速度,但是 <strong>降低</strong> 了<strong>增删改</strong>的速度，所以使用索引时,要综合考虑，<strong>索引不是越多越好</strong>，一般我们在<strong>经常</strong>出现于条件表达式中的列加索引，值越分散的列，索引的效果越好。</p><p>​    <strong>索引类型：</strong><code>primary key</code>主键索引、<code>index</code> 普通索引、<code>unique index</code> 唯一性索引、<code>fulltext index</code> 全文索引</p><p>​    在这儿再贴上之前提过的创建和删除语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#增加索引</span><br><span class="line">alter table tableName add [unique|fulltext] index 索引名(列名);</span><br><span class="line">#删除索引</span><br><span class="line">alter table tableName drop index 索引名;</span><br></pre></td></tr></table></figure><p><strong>参考文章：</strong></p><blockquote><p>mysql：<a href="https://blog.poetries.top/2019/01/22/mysql-base-review/" target="_blank" rel="noopener">https://blog.poetries.top/2019/01/22/mysql-base-review/</a></p><p>分组查询：<a href="https://zhuanlan.zhihu.com/p/46925457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/46925457</a></p><p>事务：<a href="https://blog.csdn.net/w_linux/article/details/79666086" target="_blank" rel="noopener">https://blog.csdn.net/w_linux/article/details/79666086</a></p><p>触发器：<a href="https://www.cnblogs.com/geaozhang/p/6819648.html" target="_blank" rel="noopener">https://www.cnblogs.com/geaozhang/p/6819648.html</a></p><p>索引：<a href="https://zhuanlan.zhihu.com/p/29118331" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29118331</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="MySQL" scheme="https://www.weimu.com/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="https://www.weimu.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>2017-EMNLP-Deep Joint Entity Disambiguation with Local Neural Attention</title>
    <link href="https://www.weimu.com/2020/02/26/Attention.html"/>
    <id>https://www.weimu.com/2020/02/26/Attention.html</id>
    <published>2020-02-26T01:27:22.000Z</published>
    <updated>2020-03-01T04:58:05.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>​    我们提出了一种新的文档级别联合实体消歧的深度学习模型，关键部分有实体嵌入、基于上下文窗格的神经注意力机制和a differentiable joint inference stage for disambiguation 。<a id="more"></a>我们的方法因而结合了深度学习和大多数传统方法（如图模型和概率图等等）的优点。实验显示在适度的计算代价内我们能够获得stateof-the-art 的准确率。</p><h4 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h4><p>​    实体消歧（ED）在给出的知识库（KB ）中解决了涉及到的实体问题，是文本理解的一个重要阶段，ED任务因为内在含义的模糊性（如实体名和实体本身代表的含义）而极具挑战力。这种多对多的不确定能够被从实体链接语料库中提取出的name-entity co-occurrence counts 部分捕获。</p><p>​    ED的研究大部分专注于两种文本信息的消歧：一是局部信息，只是这些实体提到的文本上下文窗格大小范围内的词；而全局信息，是开发相关实体的文档 coherence ，很多stateof-the-art 的方法旨在结合这两者的好处，而这也是我们所遵守的哲理。我们方法的特殊之处在于我们用实体嵌入做了通用表现来同时评估局部和全局。</p><p>​    这些年，很多文本和语言理解任务都是利用神经网络架构进行升级。然而，尽管是在最近的工作中，有竞争性的ED系统仍然大量地使用了人工设计的特征。这些特征总是依赖于领域知识，而且很多统计相关的依赖关系和相互作用是失败的。我们的工作有一个明确的目标，就是利用深度学习从scratch 中学习基本特征和它们的组合。穷尽我们的知识，伴随严苛，我们第一个采取了这个计划。</p><h4 id="2-Contributions-and-Related-Work"><a href="#2-Contributions-and-Related-Work" class="headerlink" title="2 Contributions and Related Work"></a>2 Contributions and Related Work</h4><p>​    之前在实体消歧方面就有大量的研究，尤其是(Ji, 2016  Entity discovery and linking reading list. ) ，我们将在这里讨论之前相关研究工作中的主要贡献。</p><h5 id="Entity-Embeddings"><a href="#Entity-Embeddings" class="headerlink" title="Entity Embeddings."></a>Entity Embeddings.</h5><p>​    我们在向量空间中已经发现了一种简单却高效的方法来做实体嵌入和词嵌入。这是鉴于词嵌入e.g. (Mikolov et al., 2013; Pennington et al.,2014)， 后来被拓展到实体嵌入和ED(Yamada et al., 2016; Fang et al., 2016;Zwicklbauer et al., 2016; Huang et al., 2015) 。和上面的方法需求数据的entity-entity co-occurrences 通常都很稀疏不同，我们宁可提升词嵌入从它们的典型实体页面和它们的超链接注释的局部上下文。这让训练更高效而且减轻了compile co-linking statistics 的需求。这些向量表现是避免手工设计特征、多重的消歧步骤、ED任务中对额外启发式算法的需求的关键。</p><h5 id="Context-Attention"><a href="#Context-Attention" class="headerlink" title="Context Attention."></a>Context Attention.</h5><p>​    我们为局部ED提出了一种新的注意力机制。受记忆网络(Sukhbaatar et al., 2015)  和(Lazic et al.,2015) 的启发，我们的模型部署了注意力机制来选择那些对消歧提供有用信息的词语。是一个结合了情境实体分数和记忆实体最终分数的学习。我们的局部模型获得了更好的精确率相比于局部概率模型(Ganeaet al., 2016) 和基于特征工程的局部模型(Globerson et al., 2016)。作为新特点，我们的模型拥有更小的内存占用并且能快速完成训练和测试。</p><p>​    </p><p>​    未完待续。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h4&gt;&lt;p&gt;​    我们提出了一种新的文档级别联合实体消歧的深度学习模型，关键部分有实体嵌入、基于上下文窗格的神经注意力机制和a differentiable joint inference stage for disambiguation 。
    
    </summary>
    
      <category term="Translates" scheme="https://www.weimu.com/categories/Translates/"/>
    
    
      <category term="translating" scheme="https://www.weimu.com/tags/translating/"/>
    
  </entry>
  
  <entry>
    <title>Cypher</title>
    <link href="https://www.weimu.com/2020/02/24/Cypher.html"/>
    <id>https://www.weimu.com/2020/02/24/Cypher.html</id>
    <published>2020-02-24T01:00:00.000Z</published>
    <updated>2020-03-01T04:58:27.280Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Cypher"><a href="#Cypher" class="headerlink" title="Cypher"></a>Cypher</h2><p>​    一种 <strong>Neo4j</strong> 的查询语言，她是根据查询的路径来进行编写。</p><p>​    举栗子：<em>a Person</em> <code>LIVES_IN</code> <em>a City</em> or <em>a City is</em> <code>PART_OF</code> <em>a Country</em>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(:Person) -[:LIVES_IN]-&gt; (:City) -[:PART_OF]-&gt; (:Country)</span><br></pre></td></tr></table></figure><h4 id="node-syntax"><a href="#node-syntax" class="headerlink" title="node syntax"></a>node syntax</h4><p> () 代表任何节点，包罗万象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">()  </span><br><span class="line">(matrix)</span><br><span class="line">(:Movie)</span><br><span class="line">(matrix:Movie)</span><br><span class="line">(matrix:Movie &#123;title: &quot;The Matrix&quot;&#125;)</span><br><span class="line">(matrix:Movie &#123;title: &quot;The Matrix&quot;, released: 1997&#125;)</span><br></pre></td></tr></table></figure><h4 id="relationship-syntax"><a href="#relationship-syntax" class="headerlink" title="relationship syntax"></a>relationship syntax</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--&gt;</span><br><span class="line">-[role]-&gt;</span><br><span class="line">-[:ACTED_IN]-&gt;</span><br><span class="line">-[role:ACTED_IN]-&gt;</span><br><span class="line">-[role:ACTED_IN &#123;roles: [&quot;Neo&quot;]&#125;]-&gt;</span><br></pre></td></tr></table></figure><h4 id="pattern-syntax"><a href="#pattern-syntax" class="headerlink" title="pattern syntax"></a>pattern syntax</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(keanu:Person:Actor &#123;name:  &quot;Keanu Reeves&quot;&#125; )</span><br><span class="line">-[role:ACTED_IN     &#123;roles: [&quot;Neo&quot;] &#125; ]-&gt;</span><br><span class="line">(matrix:Movie       &#123;title: &quot;The Matrix&quot;&#125; )</span><br></pre></td></tr></table></figure><p>‘ <strong>:</strong> ‘之前的均为变量，为了方便在别的地方进行引用，</p><p>当然，变量也可以用来表示一条路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acted_in = (:Person)-[:ACTED_IN]-&gt;(:Movie)</span><br></pre></td></tr></table></figure><p>路径也有一些属性，如节点数，关系数和路径长度，<code>nodes(path)</code>, <code>relationships(path)</code> ,<code>length(path)</code>.</p><h4 id="clauses"><a href="#clauses" class="headerlink" title="clauses"></a>clauses</h4><p>​     CREATE  ONE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE (:Movie &#123; title:&quot;The Matrix&quot;,released:1997 &#125;)</span><br></pre></td></tr></table></figure><p>​    CREATE  MORE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE (a:Person &#123; name:&quot;Tom Hanks&quot;,</span><br><span class="line">  born:1956 &#125;)-[r:ACTED_IN &#123; roles: [&quot;Forrest&quot;]&#125;]-&gt;(m:Movie &#123; title:&quot;Forrest Gump&quot;,released:1994 &#125;)</span><br><span class="line">CREATE (d:Person &#123; name:&quot;Robert Zemeckis&quot;, born:1951 &#125;)-[:DIRECTED]-&gt;(m)</span><br><span class="line">RETURN a,d,r,m</span><br></pre></td></tr></table></figure><p>  MATCH</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (m:Movie)</span><br><span class="line">RETURN m</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person &#123; name:&quot;Keanu Reeves&quot; &#125;)</span><br><span class="line">RETURN p</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)-[r:ACTED_IN]-&gt;(m:Movie)</span><br><span class="line">RETURN m.title, r.roles</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)</span><br><span class="line">CREATE (m:Movie &#123; title:&quot;Cloud Atlas&quot;,released:2012 &#125;)</span><br><span class="line">CREATE (p)-[r:ACTED_IN &#123; roles: [&apos;Zachry&apos;]&#125;]-&gt;(m)</span><br><span class="line">RETURN p,r,m</span><br></pre></td></tr></table></figure><p>  MERGE（MATCH+CREATE）</p><p>  先判断需要玩弄的东西在数据库中是否存在，再进行相应的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MERGE (m:Movie &#123; title:&quot;Cloud Atlas&quot; &#125;)</span><br><span class="line">ON CREATE SET m.released = 2012</span><br><span class="line">RETURN m</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MATCH (m:Movie &#123; title:&quot;Cloud Atlas&quot; &#125;)</span><br><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)</span><br><span class="line">MERGE (p)-[r:ACTED_IN]-&gt;(m)</span><br><span class="line">ON CREATE SET r.roles =[&apos;Zachry&apos;]</span><br><span class="line">RETURN p,r,m</span><br></pre></td></tr></table></figure><p>  如果没有满足MERGE之后描述的关系，就执行相应的操作（创建一个2014Year）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE (y:Year &#123; year:2014 &#125;)</span><br><span class="line">MERGE (y)&lt;-[:IN_YEAR]-(m10:Month &#123; month:10 &#125;)</span><br><span class="line">MERGE (y)&lt;-[:IN_YEAR]-(m11:Month &#123; month:11 &#125;)</span><br><span class="line">RETURN y,m10,m11</span><br></pre></td></tr></table></figure><p><img src="https://pic.downk.cc/item/5e553e7d6127cc0713b0d0f7.png" alt="neo4j03"></p><h2 id="Getting-the-correct-results"><a href="#Getting-the-correct-results" class="headerlink" title="Getting the correct results"></a>Getting the correct results</h2><p>  一个官方实例，首先创建用于练习的图。该图包含电影和人物节点，参演（属性有角色roles，即参演的演员）和指导关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE (matrix:Movie &#123; title:&quot;The Matrix&quot;,released:1997 &#125;)</span><br><span class="line">CREATE (cloudAtlas:Movie &#123; title:&quot;Cloud Atlas&quot;,released:2012 &#125;)</span><br><span class="line">CREATE (forrestGump:Movie &#123; title:&quot;Forrest Gump&quot;,released:1994 &#125;)</span><br><span class="line">CREATE (keanu:Person &#123; name:&quot;Keanu Reeves&quot;, born:1964 &#125;)</span><br><span class="line">CREATE (robert:Person &#123; name:&quot;Robert Zemeckis&quot;, born:1951 &#125;)</span><br><span class="line">CREATE (tom:Person &#123; name:&quot;Tom Hanks&quot;, born:1956 &#125;)</span><br><span class="line">CREATE (tom)-[:ACTED_IN &#123; roles: [&quot;Forrest&quot;]&#125;]-&gt;(forrestGump)</span><br><span class="line">CREATE (tom)-[:ACTED_IN &#123; roles: [&apos;Zachry&apos;]&#125;]-&gt;(cloudAtlas)</span><br><span class="line">CREATE (robert)-[:DIRECTED]-&gt;(forrestGump)</span><br></pre></td></tr></table></figure><p>  查找标题为”The Matrix”的电影</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH (m:Movie)</span><br><span class="line">WHERE m.title = &quot;The Matrix&quot;</span><br><span class="line">RETURN m</span><br></pre></td></tr></table></figure><p>  上条查询语句也可以直接写成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (m:Movie &#123; title: &quot;The Matrix&quot; &#125;)</span><br><span class="line">RETURN m</span><br></pre></td></tr></table></figure><p>  Cypher中  ‘ <strong>=~</strong> ‘ 表示进行正则匹配</p><p>  查询 p-r-&gt;m，人物名字为’k’开头 or 电影在2000年后发行  or  参演的角色中包含 “Neo”，返回满足以上条件的 p,r,m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person)-[r:ACTED_IN]-&gt;(m:Movie)</span><br><span class="line">WHERE p.name =~ &quot;K.+&quot; OR m.released &gt; 2000 OR &quot;Neo&quot; IN r.roles</span><br><span class="line">RETURN p,r,m</span><br></pre></td></tr></table></figure><p>  查询p-&gt;m 且 p 没有指导任何电影，返回p,m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person)-[:ACTED_IN]-&gt;(m)</span><br><span class="line">WHERE NOT (p)-[:DIRECTED]-&gt;()</span><br><span class="line">RETURN p,m</span><br></pre></td></tr></table></figure><p>  上述例子都是直接返回变量，接下来看看返回numbers, strings, arrays，maps 的情况。</p><p>  ‘ <strong>coalesce()</strong> ’ 返回第一个非空值，当所有的都为空时，则返回null,</p><p>下例中则表示若p没有昵称则直接返回”n/a”，更一般的，对于coalesce(a,b)，若a , b均为空值，则返回null。</p><p>  ‘ <strong>AS</strong> ‘ 表示 为一个东西起别名，是返回的表中的列名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person)</span><br><span class="line">RETURN p, p.name AS name, toUpper(p.name), coalesce(p.nickname,&quot;n/a&quot;) AS nickname,</span><br><span class="line">  &#123; name: p.name, label:head(labels(p))&#125; AS person</span><br></pre></td></tr></table></figure><p>  ‘ <strong>DISTINCT</strong> ‘ ，用于去重，即返回唯一值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (n)</span><br><span class="line">RETURN DISTINCT labels(n) AS Labels</span><br></pre></td></tr></table></figure><p>  返回总人数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (:Person)</span><br><span class="line">RETURN count(*) AS people</span><br></pre></td></tr></table></figure><p>  Cypher也支持聚集函数，如<code>count</code>, <code>sum</code>, <code>avg</code>, <code>min</code>, <code>max</code></p><p>  返回 <strong>共同满足</strong> 参演关系和指导关系的人物和总数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (actor:Person)-[:ACTED_IN]-&gt;(movie:Movie)&lt;-[:DIRECTED]-(director:Person)</span><br><span class="line">RETURN actor, director, count(*) AS collaborations</span><br></pre></td></tr></table></figure><p>  对结果进行排序，分页 <code>SKIP {offset}</code>、 <code>LIMIT {count}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH (a:Person)-[:ACTED_IN]-&gt;(m:Movie)</span><br><span class="line">RETURN a, count(*) AS appearances</span><br><span class="line">ORDER BY appearances DESC LIMIT 10;</span><br></pre></td></tr></table></figure><p>  ‘ <strong>collect()</strong> ‘把返回的多个值或记录组装成一个列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (m:Movie)&lt;-[:ACTED_IN]-(a:Person)</span><br><span class="line">RETURN m.title AS movie, collect(a.name) AS cast, count(*) AS actors</span><br></pre></td></tr></table></figure><p>  ‘ <strong>UNWIND</strong> ‘ 拆解collect</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UNWIND[1,2,3] AS x</span><br><span class="line">RETURN x</span><br></pre></td></tr></table></figure><h2 id="Composing-large-statements"><a href="#Composing-large-statements" class="headerlink" title="Composing large statements"></a>Composing large statements</h2><p>  使用的例子图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE (matrix:Movie &#123; title:&quot;The Matrix&quot;,released:1997 &#125;)</span><br><span class="line">CREATE (cloudAtlas:Movie &#123; title:&quot;Cloud Atlas&quot;,released:2012 &#125;)</span><br><span class="line">CREATE (forrestGump:Movie &#123; title:&quot;Forrest Gump&quot;,released:1994 &#125;)</span><br><span class="line">CREATE (keanu:Person &#123; name:&quot;Keanu Reeves&quot;, born:1964 &#125;)</span><br><span class="line">CREATE (robert:Person &#123; name:&quot;Robert Zemeckis&quot;, born:1951 &#125;)</span><br><span class="line">CREATE (tom:Person &#123; name:&quot;Tom Hanks&quot;, born:1956 &#125;)</span><br><span class="line">CREATE (tom)-[:ACTED_IN &#123; roles: [&quot;Forrest&quot;]&#125;]-&gt;(forrestGump)</span><br><span class="line">CREATE (tom)-[:ACTED_IN &#123; roles: [&apos;Zachry&apos;]&#125;]-&gt;(cloudAtlas)</span><br><span class="line">CREATE (robert)-[:DIRECTED]-&gt;(forrestGump)</span><br></pre></td></tr></table></figure><h5 id><a href="#" class="headerlink" title=" "></a> </h5><h4 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h4><p>  对于相似的查询结构，取结果的并集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MATCH (actor:Person)-[r:ACTED_IN]-&gt;(movie:Movie)</span><br><span class="line">RETURN actor.name AS name, type(r) AS type, movie.title AS title</span><br><span class="line">UNION</span><br><span class="line">MATCH (director:Person)-[r:DIRECTED]-&gt;(movie:Movie)</span><br><span class="line">RETURN director.name AS name, type(r) AS type, movie.title AS title</span><br></pre></td></tr></table></figure><p>  以上语句等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (actor:Person)-[r:ACTED_IN|DIRECTED]-&gt;(movie:Movie)</span><br><span class="line">RETURN actor.name AS name, type(r) AS type, movie.title AS title</span><br></pre></td></tr></table></figure><h4 id="WITH"><a href="#WITH" class="headerlink" title="WITH"></a>WITH</h4><p>  引导数据的流向，和 <strong>RETURN</strong> 相似只是不会终止查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MATCH (person:Person)-[:ACTED_IN]-&gt;(m:Movie)</span><br><span class="line">WITH person, count(*) AS appearances, collect(m.title) AS movies</span><br><span class="line">WHERE appearances &gt; 1</span><br><span class="line">RETURN person.name, appearances, movies</span><br></pre></td></tr></table></figure><h2 id="Defining-a-schema"><a href="#Defining-a-schema" class="headerlink" title="Defining a schema"></a>Defining a schema</h2><p>  例子图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE (matrix:Movie &#123; title:&quot;The Matrix&quot;,released:1997 &#125;)</span><br><span class="line">CREATE (cloudAtlas:Movie &#123; title:&quot;Cloud Atlas&quot;,released:2012 &#125;)</span><br><span class="line">CREATE (forrestGump:Movie &#123; title:&quot;Forrest Gump&quot;,released:1994 &#125;)</span><br><span class="line">CREATE (keanu:Person &#123; name:&quot;Keanu Reeves&quot;&#125;)</span><br><span class="line">CREATE (robert:Person &#123; name:&quot;Robert Zemeckis&quot;, born:1951 &#125;)</span><br><span class="line">CREATE (tom:Person &#123; name:&quot;Tom Hanks&quot;, born:1956 &#125;)</span><br><span class="line">CREATE (tom)-[:ACTED_IN &#123; roles: [&quot;Forrest&quot;]&#125;]-&gt;(forrestGump)</span><br><span class="line">CREATE (tom)-[:ACTED_IN &#123; roles: [&apos;Zachry&apos;]&#125;]-&gt;(cloudAtlas)</span><br><span class="line">CREATE (robert)-[:DIRECTED]-&gt;(forrestGump)</span><br></pre></td></tr></table></figure><h4 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h4><p>  创建索引，这样在查询的时候会加快查询速度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX ON :Actor(name)</span><br></pre></td></tr></table></figure><p>  查看数据库中的索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL db.indexes</span><br><span class="line">YIELD description, tokenNames, properties, type;</span><br></pre></td></tr></table></figure><h4 id="CONSTRAINT"><a href="#CONSTRAINT" class="headerlink" title="CONSTRAINT"></a>CONSTRAINT</h4><p>  为数据添加需要遵守的相关规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.title IS UNIQUE</span><br></pre></td></tr></table></figure><p>  查看constraints。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL db.constraints</span><br></pre></td></tr></table></figure><h2 id="Import-data"><a href="#Import-data" class="headerlink" title="Import data"></a>Import data</h2><p>  我们要导入movies.csv，roles.csv，persons.csv三个文件到图数据库中。假如文件都使用<code>file:///</code> URL。</p><p>  1、首先为我们的电影和人物的ID创建唯一约束，为城市名创建索引就隐含了唯一的条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX ON :Country(name)</span><br></pre></td></tr></table></figure><p>  2、然后我们将文件加载进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOAD CSV WITH HEADERS FROM &quot;file:///persons.csv&quot; AS csvLine</span><br><span class="line">CREATE (p:Person &#123;id: toInteger(csvLine.id), name: csvLine.name&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOAD CSV WITH HEADERS FROM &quot;file:///movies.csv&quot; AS csvLine</span><br><span class="line">MERGE (country:Country &#123;name: csvLine.country&#125;)</span><br><span class="line">CREATE (movie:Movie &#123;id: toInteger(csvLine.id), title: csvLine.title, year:toInteger(csvLine.year)&#125;)</span><br><span class="line">CREATE (movie)-[:MADE_IN]-&gt;(country)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USING PERIODIC COMMIT 500  //大文件进行分批导入，默认1000行提交一次，这里设置为500行提交一次</span><br><span class="line">LOAD CSV WITH HEADERS FROM &quot;file:///roles.csv&quot; AS csvLine</span><br><span class="line">MATCH (person:Person &#123;id: toInteger(csvLine.personId)&#125;),(movie:Movie &#123;id: toInteger(csvLine.movieId)&#125;)</span><br><span class="line">CREATE (person)-[:PLAYED &#123;role: csvLine.role&#125;]-&gt;(movie)</span><br></pre></td></tr></table></figure><p>  3、最后删除我们创建的唯一约束</p><p>  小伙伴疑惑了，为什么要删除呢？因为ID的目的仅仅是为了便于导入关系的，最后我们当然可以进行删除啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE</span><br></pre></td></tr></table></figure><p>参考文档：</p><blockquote><p><a href="https://neo4j.com/docs/getting-started/current/cypher-intro/results/" target="_blank" rel="noopener">https://neo4j.com/docs/getting-started/current/cypher-intro/results/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Neo4j" scheme="https://www.weimu.com/categories/Neo4j/"/>
    
    
      <category term="cypher" scheme="https://www.weimu.com/tags/cypher/"/>
    
  </entry>
  
  <entry>
    <title>初识Neo4j</title>
    <link href="https://www.weimu.com/2020/02/23/%E5%88%9D%E8%AF%86Neo4j.html"/>
    <id>https://www.weimu.com/2020/02/23/初识Neo4j.html</id>
    <published>2020-02-23T01:26:25.000Z</published>
    <updated>2020-03-01T05:08:15.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Neo4j‘s-GOOD"><a href="#Neo4j‘s-GOOD" class="headerlink" title="Neo4j‘s GOOD"></a>Neo4j‘s GOOD</h3><ul><li><p>完整的ACID支持（保证了<strong>数据的一致性</strong>）</p></li><li><p>高可用性</p><p>可以非常轻松地集成到任何一个应用，只会受到计算机本身硬件性能的影响，而不会不受业务本身的约束。</p></li><li><p>轻易扩展到上亿级别的节点和关系</p></li><li><p>通过遍历工具高速检索数据</p></li></ul><h3 id="WHAT-图数据库"><a href="#WHAT-图数据库" class="headerlink" title="WHAT 图数据库?"></a>WHAT 图数据库?</h3><p>​    1、图数据库用图来存储数据，是最接近高性能的一种用于存储数据的数据结构方式之一。</p><p>​    2、一个图由无数的节点和关系组成，关系将图各个部分组织起来。如： 小黄拥有小韩，小韩喜欢小猪，这只小猪它是粉红色的（你知道吗小黄会嫉妒这只小猪的  …），粉红色就是这只猪的属性了。</p><p><img src="https://pic.downk.cc/item/5e552add6127cc0713ad184f.png" alt="neo4j01"></p><p>​    3、用 Traversal 进行数据库查询，通过一种算法（宽度优先或深度优先），从一些开始节点开始查询与其关联的节点，经过一条路径最终找到结果。小黄—&gt;小韩—&gt;小猪</p><p>​    4、为节点和关系建立索引，这样可以更高效地进行查询。如： 我要查询的人名字叫 <strong>韩小沐</strong>（敲黑板，故事发展的重要人物。）</p><p>​            <img src="https://pic.downk.cc/item/5e552d8d6127cc0713ad8d9a.png" alt="neo4j02"></p><p>​    5、标签，为了便于进行特定的操作。如为小韩贴上 <strong>nicer</strong> 标签，就能更方便的使用，一个实体可以贴上多个标签，可以再给小韩贴上 <strong>student</strong> 标签，这样她就不可以恋爱啦，哈哈。</p><p>​    最后让我们来看一下推荐的节点，关系，属性命名规则吧：</p><p>​        节点： <code>:VehicleOwner</code> rather than <code>:vehice_owner</code></p><p>​        关系： <code>:OWNS_VEHICLE</code> rather than <code>:ownsVehicle</code></p><p>​        属性： <code>firstName</code> rather than <code>first_name</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Neo4j" scheme="https://www.weimu.com/categories/Neo4j/"/>
    
    
      <category term="neo4j" scheme="https://www.weimu.com/tags/neo4j/"/>
    
  </entry>
  
</feed>
